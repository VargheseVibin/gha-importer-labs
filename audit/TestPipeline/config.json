{
  "flow-definition": {
    "plugin": "workflow-job@1189.va_d37a_e9e4eda_",
    "actions": null,
    "description": null,
    "keepDependencies": "false",
    "properties": null,
    "definition": {
      "class": "org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition",
      "plugin": "workflow-cps@2729.2732.vda_e3f07b_5a_f8",
      "script": "pipeline {\n\tagent {\n\t\tkubernetes {\n\t\t\tyaml agentTemplate(name: \"nodejs-agent.yaml\", binding: ['env': env], buildType: \"java\")\n\t\t\tdefaultContainer 'golang'\n\t\t}\n\t}\n\toptions {\n\t\ttimestamps()\n\t\tskipDefaultCheckout true\n// \t\tansiColor('xterm')\n\t\tbuildDiscarder(logRotator(\n\t\t\t\tartifactDaysToKeepStr: '0',\n\t\t\t\tartifactNumToKeepStr: '0',\n\t\t\t\tdaysToKeepStr: '5',\n\t\t\t\tnumToKeepStr: '5')\n\t\t)\n\t\tdisableConcurrentBuilds()\n\t}\n\tparameters {\n\t\tbooleanParam(name: 'DEPLOY_ENABLED', defaultValue: false, description: 'To enable deployment from branches. Works only on develop/develop-release/master branches')\n\t}\n\tenvironment {\n\t\tCREDENTIALS_ID = 'jenkins-bitbucket'\n\t\tCRED_ID = 'karuna-bitbucket'\n\t\tGIT_CREDENTIALS = credentials(\"${env.CRED_ID}\")\n\t}\n\tstages {\n\t\tstage('prepare') {\n\t\t\tsteps {\n\t\t\t\tscript {\n\t\t\t\t\tsonarQube = new ch.sunrise.codequality.SonarQube()\n\t\t\t\t\tgo = new ch.sunrise.build.Go()\n\t\t\t\t\tcommonOpts = new ch.sunrise.common.PipelineOpts()\n\t\t\t\t\tcheckMarxSast = new ch.sunrise.sast.CheckMarx()\n\t\t\t\t\tcheckMarxSca = new ch.sunrise.sca.CheckMarx()\n\t\t\t\t\tnotification = new ch.sunrise.communication.Notifications()\n\t\t\t\t\tpullRequestJob = env.BRANCH_NAME?.matches('PR-\\\\d+')\n\t\t\t\t\tprintln \"pull request job : ${pullRequestJob}\"\n\t\t\t\t\tif(!pullRequestJob){\n\t\t\t\t\t\tenv.PIPELINE_VALUES_PATH = \"${env.PIPELINE_VALUES_PATH}/pipeline-build-${BRANCH_NAME}.yaml\"\n\t\t\t\t\t} else{\n\t\t\t\t\t\tenv.PIPELINE_VALUES_PATH = \"${env.PIPELINE_VALUES_PATH}/pipeline-build-pr.yaml\"\n\t\t\t\t\t}\n\n\t\t\t\t\tpipelineValues = new ch.sunrise.common.pipelineValues()\n\t\t\t\t\tpipelineValues.loadPipelineValues()\n\t\t\t\t\tpipelineOpts = commonOpts.getPipelineOpts(opts)\n\t\t\t\t\timage = new ch.sunrise.docker.Image()\n\t\t\t\t\tops = new ch.sunrise.gitops.ops()\n\t\t\t\t\targocd = new ch.sunrise.deployment.ArgoCD()\n\t\t\t\t\trobotApi = new ch.sunrise.robot.RobotApi()\n\t\t\t\t\tcommonUtils = new ch.sunrise.common.Utils()\n\t\t\t\t\tversionUtils = new ch.sunrise.common.Versioning()\n\t\t\t\t\tgit  = new ch.sunrise.scm.Git()\n\t\t\t\t\teaiCockpit = new ch.sunrise.dashboard.Eaicockpit()\n\t\t\t\t\tdeployEnabled = false\n\t\t\t\t\ttry {\n\t\t\t\t\t\tdeployEnabled = DEPLOY_ENABLED\n\t\t\t\t\t\tdeployEnabled = commonUtils.enableDeploy(pipelineOpts.branch)\n\t\t\t\t\t} catch (propertyError) {\n\t\t\t\t\t}\n\t\t\t\t\tsh \"ls -la\"\n\t\t\t\t\tsh \"mkdir -p ${BUILD_PATH}\"\n\t\t\t\t  //  env.version = versionUtils.\"getVersion${VERSIONING_FUNCTION}\"()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tstage(\"prod shadow checks\") {\n\t\t\twhen { expression { return BRANCH_NAME == 'develop' } }\n\t\t\tsteps {\n\t\t\t\tscript{\n\t\t\t\t\teaiCockpit.prodShadowCheck()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tstage('Checkout') {\n\t\t\tsteps {\n\t\t\t\tscript {\n\t\t\t\t\tLAST_ACTIVE_STAGE = env.STAGE_NAME\n\t\t\t\t\tdir(\"${BUILD_PATH}\"){\n\t\t\t\t\t\tgit.checkout([],BRANCH_NAME)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t   stage('Build Application') {\n\t\t\tsteps {\n\t\t\t\tscript {\n\t\t\t\t\tLAST_ACTIVE_STAGE = env.STAGE_NAME\n\t\t\t\t\tdir(\"${BUILD_PATH}\") {\n\t\t\t\t\t\tsh \"ls -la\"\n\t\t\t\t\t\tsh \"git status\"\n\t\t\t\t\t\tgo.execute()\n\t\t\t\t\t\tenv.version = versionUtils.\"getVersion${VERSIONING_FUNCTION}\"()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t /*   stage(\"UT and SAST and SCA\") {\n\t\t\tparallel {\n\t\t\t\tstage('Unit Testing and Code Coverage') {\n\t\t\t\t\twhen { expression { return !pipelineOpts.unitTestDisabled } }\n\t\t\t\t\tsteps {\n\t\t\t\t\t\tscript {\n\t\t\t\t\t\t\tLAST_ACTIVE_STAGE = env.STAGE_NAME\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstage('Static Application Security Testing') {\n\t\t\t\t\twhen { expression { return !pipelineOpts.sastDisabled } }\n\t\t\t\t\tsteps {\n\t\t\t\t\t\tscript {\n\t\t\t\t\t\t\tLAST_ACTIVE_STAGE = env.STAGE_NAME\n\t\t\t\t\t\t\tcheckMarxSast.execute()\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstage('SoftWare Composition Analysis') {\n\t\t\t\t\twhen { expression { return !pipelineOpts.scaDisabled } }\n\t\t\t\t\tsteps {\n\t\t\t\t\t\tscript {\n\t\t\t\t\t\t\tLAST_ACTIVE_STAGE = env.STAGE_NAME\n\t\t\t\t\t\t\tcheckMarxSca.execute()\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} */\n\t   stage('Code Quality Check') {\n\t\t\twhen { expression { return !pipelineOpts.qualityCheckDisabled } }\n\t\t\tsteps {\n\t\t\t\tcontainer('sonar-scanner-cli') {\n\t\t\t\t\tscript {\n\t\t\t\t\t\tLAST_ACTIVE_STAGE = env.STAGE_NAME\n\t\t\t\t\t\tsonarQube.execute(true)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tstage('Build and Push Application Image') {\n\t\t\twhen { expression { return deployEnabled } }\n\t\t\tsteps {\n\t\t\t\tcontainer('docker') {\n\t\t\t\t\tscript {\n\t\t\t\t\t\tLAST_ACTIVE_STAGE = env.STAGE_NAME\n\t\t\t\t\t\tversionUtils.setImageVersionAndName()\n\t\t\t\t\t\timage.prepareGoAppDirectory()\n\t\t\t\t\t\timage.buildAndPushImage(env.IMAGE_NAME, env.IMAGE_VERSION)\n\t\t\t\t\t\tenv.IMAGE_HASH = image.getImageDigest(env.IMAGE_NAME, env.IMAGE_VERSION)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tstage('Image tag and hash update') {\n\t\t\twhen { expression { return deployEnabled } }\n\t\t\tsteps {\n\t\t\t\t\tscript {\n\t\t\t\t\t\tLAST_ACTIVE_STAGE = env.STAGE_NAME\n\t\t\t\t\t\tops.updateImageDetails(env.IMAGE_HASH, env.IMAGE_VERSION)\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tstage('Deployment') {\n\t\t\twhen {\n\t\t\t\tbeforeAgent true\n\t\t\t\texpression { return deployEnabled }\n\t\t\t}\n\t\t\tagent {\n\t\t\t\tkubernetes {\n\t\t\t\t\t\tyaml agentTemplate(name: \"ansible-agent.yaml\", binding: ['env': env], buildType: \"java\")\n\t\t\t\t}\n\t\t\t}\n\t\t\tsteps {\n\t\t\t\tcontainer('ansible') {\n\t\t\t\t\tscript {\n\t\t\t\t\t   LAST_ACTIVE_STAGE = env.STAGE_NAME\n\t\t\t\t\t   argocd.checkoutDeploymentCode()\n\t\t\t\t\t   argocd.deploymentApps()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tpost {\n\t\t   always {\n\t\t\t  script {\n\t\t\t\t def content = \"\"\n\t\t\t\t if(currentBuild.result == 'SUCCESS') {    \n\t\t\t\t   content += '${SCRIPT,template=\"email.template\"}'\n\t\t\t\t }\n\t\t   // if(currentBuild.result == 'FAILURE') \n\t\t\t\telse  if(currentBuild.result == 'FAILURE')  {\n\t\t\t\t  content = \"\\n\\nFailed at stage: '${LAST_ACTIVE_STAGE}'\\n\"              \n\t\t\t\t  content += '${SCRIPT,template=\"email.template\"}'\n\t\t\t\t }\n\t\t\t\telse {\n\t\t\t\t }\n\t\t\t  notification.sendNotifications(currentBuild.result, \"DevSecOps\" , content)        \n\t\t\t}\n\t\t}\n\t}\n}\n",
      "sandbox": "true"
    },
    "triggers": null,
    "disabled": "false"
  }
}