{"status"=>"ok", "data"=>{"result"=>"success", "json"=>{"pipeline"=>{"stages"=>[{"name"=>"prepare", "branches"=>[{"name"=>"default", "steps"=>[{"name"=>"script", "arguments"=>[{"key"=>"scriptBlock", "value"=>{"isLiteral"=>true, "value"=>"sonarQube = new ch.sunrise.codequality.SonarQube()\n\t\t\t\t\tgo = new ch.sunrise.build.Go()\n\t\t\t\t\tcommonOpts = new ch.sunrise.common.PipelineOpts()\n\t\t\t\t\tcheckMarxSast = new ch.sunrise.sast.CheckMarx()\n\t\t\t\t\tcheckMarxSca = new ch.sunrise.sca.CheckMarx()\n\t\t\t\t\tnotification = new ch.sunrise.communication.Notifications()\n\t\t\t\t\tpullRequestJob = env.BRANCH_NAME?.matches('PR-\\\\d+')\n\t\t\t\t\tprintln \"pull request job : ${pullRequestJob}\"\n\t\t\t\t\tif(!pullRequestJob){\n\t\t\t\t\t\tenv.PIPELINE_VALUES_PATH = \"${env.PIPELINE_VALUES_PATH}/pipeline-build-${BRANCH_NAME}.yaml\"\n\t\t\t\t\t} else{\n\t\t\t\t\t\tenv.PIPELINE_VALUES_PATH = \"${env.PIPELINE_VALUES_PATH}/pipeline-build-pr.yaml\"\n\t\t\t\t\t}\n\n\t\t\t\t\tpipelineValues = new ch.sunrise.common.pipelineValues()\n\t\t\t\t\tpipelineValues.loadPipelineValues()\n\t\t\t\t\tpipelineOpts = commonOpts.getPipelineOpts(opts)\n\t\t\t\t\timage = new ch.sunrise.docker.Image()\n\t\t\t\t\tops = new ch.sunrise.gitops.ops()\n\t\t\t\t\targocd = new ch.sunrise.deployment.ArgoCD()\n\t\t\t\t\trobotApi = new ch.sunrise.robot.RobotApi()\n\t\t\t\t\tcommonUtils = new ch.sunrise.common.Utils()\n\t\t\t\t\tversionUtils = new ch.sunrise.common.Versioning()\n\t\t\t\t\tgit  = new ch.sunrise.scm.Git()\n\t\t\t\t\teaiCockpit = new ch.sunrise.dashboard.Eaicockpit()\n\t\t\t\t\tdeployEnabled = false\n\t\t\t\t\ttry {\n\t\t\t\t\t\tdeployEnabled = DEPLOY_ENABLED\n\t\t\t\t\t\tdeployEnabled = commonUtils.enableDeploy(pipelineOpts.branch)\n\t\t\t\t\t} catch (propertyError) {\n\t\t\t\t\t}\n\t\t\t\t\tsh \"ls -la\"\n\t\t\t\t\tsh \"mkdir -p ${BUILD_PATH}\""}}]}]}]}, {"when"=>{"conditions"=>[{"name"=>"expression", "arguments"=>[{"key"=>"scriptBlock", "value"=>{"isLiteral"=>true, "value"=>"return BRANCH_NAME == 'develop'"}}]}]}, "name"=>"prod shadow checks", "branches"=>[{"name"=>"default", "steps"=>[{"name"=>"script", "arguments"=>[{"key"=>"scriptBlock", "value"=>{"isLiteral"=>true, "value"=>"eaiCockpit.prodShadowCheck()"}}]}]}]}, {"name"=>"Checkout", "branches"=>[{"name"=>"default", "steps"=>[{"name"=>"script", "arguments"=>[{"key"=>"scriptBlock", "value"=>{"isLiteral"=>true, "value"=>"LAST_ACTIVE_STAGE = env.STAGE_NAME\n\t\t\t\t\tdir(\"${BUILD_PATH}\"){\n\t\t\t\t\t\tgit.checkout([],BRANCH_NAME)\n\t\t\t\t\t}"}}]}]}]}, {"name"=>"Build Application", "branches"=>[{"name"=>"default", "steps"=>[{"name"=>"script", "arguments"=>[{"key"=>"scriptBlock", "value"=>{"isLiteral"=>true, "value"=>"LAST_ACTIVE_STAGE = env.STAGE_NAME\n\t\t\t\t\tdir(\"${BUILD_PATH}\") {\n\t\t\t\t\t\tsh \"ls -la\"\n\t\t\t\t\t\tsh \"git status\"\n\t\t\t\t\t\tgo.execute()\n\t\t\t\t\t\tenv.version = versionUtils.\"getVersion${VERSIONING_FUNCTION}\"()\n\t\t\t\t\t}"}}]}]}]}, {"when"=>{"conditions"=>[{"name"=>"expression", "arguments"=>[{"key"=>"scriptBlock", "value"=>{"isLiteral"=>true, "value"=>"return !pipelineOpts.qualityCheckDisabled"}}]}]}, "name"=>"Code Quality Check", "branches"=>[{"name"=>"default", "steps"=>[{"name"=>"container", "arguments"=>{"isLiteral"=>true, "value"=>"sonar-scanner-cli"}, "children"=>[{"name"=>"script", "arguments"=>[{"key"=>"scriptBlock", "value"=>{"isLiteral"=>true, "value"=>"LAST_ACTIVE_STAGE = env.STAGE_NAME\n\t\t\t\t\t\tsonarQube.execute(true)"}}]}]}]}]}, {"when"=>{"conditions"=>[{"name"=>"expression", "arguments"=>[{"key"=>"scriptBlock", "value"=>{"isLiteral"=>true, "value"=>"return deployEnabled"}}]}]}, "name"=>"Build and Push Application Image", "branches"=>[{"name"=>"default", "steps"=>[{"name"=>"container", "arguments"=>{"isLiteral"=>true, "value"=>"docker"}, "children"=>[{"name"=>"script", "arguments"=>[{"key"=>"scriptBlock", "value"=>{"isLiteral"=>true, "value"=>"LAST_ACTIVE_STAGE = env.STAGE_NAME\n\t\t\t\t\t\tversionUtils.setImageVersionAndName()\n\t\t\t\t\t\timage.prepareGoAppDirectory()\n\t\t\t\t\t\timage.buildAndPushImage(env.IMAGE_NAME, env.IMAGE_VERSION)\n\t\t\t\t\t\tenv.IMAGE_HASH = image.getImageDigest(env.IMAGE_NAME, env.IMAGE_VERSION)"}}]}]}]}]}, {"when"=>{"conditions"=>[{"name"=>"expression", "arguments"=>[{"key"=>"scriptBlock", "value"=>{"isLiteral"=>true, "value"=>"return deployEnabled"}}]}]}, "name"=>"Image tag and hash update", "branches"=>[{"name"=>"default", "steps"=>[{"name"=>"script", "arguments"=>[{"key"=>"scriptBlock", "value"=>{"isLiteral"=>true, "value"=>"LAST_ACTIVE_STAGE = env.STAGE_NAME\n\t\t\t\t\t\tops.updateImageDetails(env.IMAGE_HASH, env.IMAGE_VERSION)"}}]}]}]}, {"agent"=>{"type"=>"kubernetes", "arguments"=>[{"key"=>"yaml", "value"=>{"isLiteral"=>false, "value"=>"${agentTemplate(name: \"ansible-agent.yaml\", binding: ['env': env], buildType: \"java\")}"}}]}, "when"=>{"conditions"=>[{"name"=>"expression", "arguments"=>[{"key"=>"scriptBlock", "value"=>{"isLiteral"=>true, "value"=>"return deployEnabled"}}]}], "beforeAgent"=>true}, "name"=>"Deployment", "branches"=>[{"name"=>"default", "steps"=>[{"name"=>"container", "arguments"=>{"isLiteral"=>true, "value"=>"ansible"}, "children"=>[{"name"=>"script", "arguments"=>[{"key"=>"scriptBlock", "value"=>{"isLiteral"=>true, "value"=>"LAST_ACTIVE_STAGE = env.STAGE_NAME\n\t\t\t\t\t   argocd.checkoutDeploymentCode()\n\t\t\t\t\t   argocd.deploymentApps()"}}]}]}]}]}], "post"=>{"conditions"=>[{"condition"=>"always", "branch"=>{"name"=>"default", "steps"=>[{"name"=>"script", "arguments"=>[{"key"=>"scriptBlock", "value"=>{"isLiteral"=>true, "value"=>"def content = \"\"\n\t\t\t\t if(currentBuild.result == 'SUCCESS') {    \n\t\t\t\t   content += '${SCRIPT,template=\"email.template\"}'\n\t\t\t\t }\n\t\t   // if(currentBuild.result == 'FAILURE') \n\t\t\t\telse  if(currentBuild.result == 'FAILURE')  {\n\t\t\t\t  content = \"\\n\\nFailed at stage: '${LAST_ACTIVE_STAGE}'\\n\"              \n\t\t\t\t  content += '${SCRIPT,template=\"email.template\"}'\n\t\t\t\t }\n\t\t\t\telse {\n\t\t\t\t }\n\t\t\t  notification.sendNotifications(currentBuild.result, \"DevSecOps\" , content)"}}], :if=>"always()"}]}}]}, "environment"=>[{"key"=>"CREDENTIALS_ID", "value"=>{"isLiteral"=>true, "value"=>"jenkins-bitbucket"}}, {"key"=>"CRED_ID", "value"=>{"isLiteral"=>true, "value"=>"karuna-bitbucket"}}, {"key"=>"GIT_CREDENTIALS", "value"=>{"name"=>"credentials", "arguments"=>[{"isLiteral"=>false, "value"=>"\"${env.CRED_ID}\""}]}}], "agent"=>{"type"=>"kubernetes", "arguments"=>[{"key"=>"yaml", "value"=>{"isLiteral"=>false, "value"=>"${agentTemplate(name: \"nodejs-agent.yaml\", binding: ['env': env], buildType: \"java\")}"}}, {"key"=>"defaultContainer", "value"=>{"isLiteral"=>true, "value"=>"golang"}}]}, "options"=>{"options"=>[{"name"=>"timestamps", "arguments"=>[]}, {"name"=>"skipDefaultCheckout", "arguments"=>[{"isLiteral"=>true, "value"=>true}]}, {"name"=>"buildDiscarder", "arguments"=>[{"name"=>"logRotator", "arguments"=>[{"key"=>"artifactDaysToKeepStr", "value"=>{"isLiteral"=>true, "value"=>"0"}}, {"key"=>"artifactNumToKeepStr", "value"=>{"isLiteral"=>true, "value"=>"0"}}, {"key"=>"daysToKeepStr", "value"=>{"isLiteral"=>true, "value"=>"5"}}, {"key"=>"numToKeepStr", "value"=>{"isLiteral"=>true, "value"=>"5"}}]}]}, {"name"=>"disableConcurrentBuilds", "arguments"=>[]}]}, "parameters"=>{"parameters"=>[{"name"=>"booleanParam", "arguments"=>[{"key"=>"name", "value"=>{"isLiteral"=>true, "value"=>"DEPLOY_ENABLED"}}, {"key"=>"defaultValue", "value"=>{"isLiteral"=>true, "value"=>false}}, {"key"=>"description", "value"=>{"isLiteral"=>true, "value"=>"To enable deployment from branches. Works only on develop/develop-release/master branches"}}]}]}}}}}